Development Tips for POSTERGENIUS24

- **Using cross-env, open local host3000 in chrome on any device**:
    - What it does: Allows you to set environment settings that work on any computer.
    - How to install: Run npm install cross-env --save-dev in the terminal.


- **Open localhost3000 in Chrome**:
    - What it does: Automatically opens your app in Google Chrome when you run it.
    - How to set it up: Change the script in package.json to "dev": "cross-env BROWSER=chrome next dev".


- **Creating a Next.js App**:
    - What it does: Quickly sets up a new Next.js project.
    - How to do it: Use the command npx create-next-app@latest [your-project-name] --typescript.


- **Understanding Project Files**:
    - node_modules: This folder has all the tools (packages) your app needs to work.
    - pages: Contains the different pages of your app. Each file here represents a part of your website (like the homepage).
    - public: Holds images and icons that can be used in your app.
    - package.json: A list of everything your app needs to run and scripts to start your app.


- **Managing Port 3000 on Windows**:
    lists processes on port 3000: "netstat -ano | findstr :3000"
    stops the process with a PID: "taskkill /PID 1234 /F"
    makes sure no process ir running: "netstat -ano | findstr :3000"


- **run Development server**
    npm run dev


- **setting up github**
    - git init
    - git add .
    - git commit -m "Initial commit"
    - git remote add origin https://github.com/klawrenceboxx/postergenius2024-11-04.git
    - git push -u origin master


- **adding prettier**
    to install use "npm i --save-dev --save-exact  prettier"
    this will make sure that whatever version of prettier you install, it stays that way, so that if they update prettier it doesnt update your code base as well
    go settings > text editor > default formatter > set this to prettier - code formatter
    search up "formatonsave" in settings and make sure the box is checked


-**plugin causes hydration error**
    my video speed controller will cause a hydration error in my development server


-**global css**
    affects all the components in the documents


-**project structure**
    favicon - the icon displayed for the browser tab of our website
    fonts - contains fonts used in our application
        the fonts are referenced in layout.tsx


**react components**
    in Next.js 15 (which is what this project uses) react components are server components by default
    server components cannot handle state or interactivity
    if you want to turn a component (server component by default) into a client component (which can use state and or interactivity) add '"use client";' at the top of the pages
    client components are rendered in the browser, but can also be initially rendered in HTML once, on the server allowing for SEO, better UX and improved perceived performance. You can check the console for either or like console log, or the vscode terminal
    Optimization: the goal is to use server components as much as possible, and only use client components when you need interactivity
        server components: fetching data, accessing backend resources, keeping sensitive information on server
        client components: interactivity and event listeners, using hooks like useState or useEffect, using browser-only APIs


**Routing**
    all routes must be placed inside the app folder
    every file that represents a route should be named page.js or page.tsx
    every folder corresponds to a path segment in the browser URL. e.g., an 'about' folder inside the app folder will correspond to url/about.com
        as long as you have a page file in the about folder
    the page.tsx file in the app folder corresponds to the root route in your application (website url followed by '/', e.g., postergenius/.com)
    nested


**Advanced routing**
    nested routes work great for blog posts, but not ecommerce stores: folder inside of a folder inside of a folder e.g., url/about/blog/first-post
    dynamic routes - create a folder within a folder in square brackets with the name 'id' e.g., app/products/[id]/page.tsx
        any route that tails the product segment will render the same page e.g., product/iphone has the same page contents as product/macbook
        however, you can pass down the url id like props
        page component automatically receives route parameters as a prop, which you can destructure of type params of type object with id of type string
    dynamic apis have been made asynchronous - params is one of them


**redux toolkit**
    1. install dependencies - npm install @reduxjs/toolkit react-redux redux redux-thunk redux-persist redux-devtools-extension next-redux-wrapper
    create store folder - Create a store folder in the root of your project. Inside this folder, create a store.ts file.
    2. create a store.ts file - 
    3. create a cartSlice.js file - 
    4. update the layout.tsx file - 

    /app
        layout.tsx          // Wraps the app with StoreProvider
        page.tsx            // Example Home Page
        StoreProvider.tsx   // Provides the Redux store
    /lib
        store.ts            // Configures the Redux store
        hooks.ts            // Typed hooks for Redux
        /features
            cartSlice.ts    // Defines cart state and actions


**Fetch**
    fetch returns a Response object, not actual JSON data, so we can't console log it without first parsing the Response

    you need to understand how the data is structured in order to correctly access it

    fetch → await → response → data

    app directory (new App Router):
        doesn't support getServerSideProps
        
        uses async server components or explicitly call APIs (e.g., in fetch) for server-side rendierng

        everything in teh app directory is inherently server-first unless explicitly marked as a client component


**Typescript**
    1. What TypeScript cares about
    
    Variables: What type of data a variable can hold.
    Functions: What types of arguments a function takes and what it returns.
    Objects: What properties an object has and their types.
    Promises: Ensuring the type of data a promise resolves to matches what you expect.

    two types in Typescript 
        (1) primitive types: number, string, boolean, etc 
        (2) custom types: interfaces or type aliases - types you define to describe complex structures like objects, arrays, or API responses
       
        e.g., interface ApiResponse {
                id: number;
                name: string;
                email: string;
                }


**React Functions**
    What Other React Functions Exist?
    React functions can be divided into two categories:

    1. React Core Functions:
    useState: Manages local state.
    useEffect: Runs side effects after rendering.
    useContext: Shares data globally without prop drilling.
    useReducer: Manages complex state logic.
    useRef: Maintains a mutable reference to a DOM element or variable.
    useMemo: Optimizes performance by memoizing a calculation.
    useCallback: Memoizes a function to prevent unnecessary re-creation.

    2. React Lifecycle Methods (Class Components):
    componentDidMount: Called after a component is rendered.
    componentDidUpdate: Called after a component updates.
    componentWillUnmount: Called before a component is removed.

    3. Next.js-Specific Functions:
    getServerSideProps: Fetch data at request time for SSR.
    getStaticProps: Fetch data at build time for static generation.
    getStaticPaths: Define dynamic routes for static generation.
    useRouter: Access routing information on the client.


**file entries**
    src/app/layout.tsx: Acts as your app-wide layout wrapper
    src/app/page.tsx: Acts as your app's home page

questions: figure out how the 'head' section works for discoverability
**core features**

Lecture thumbnail
0:11 / 14:14

Lecture thumbnail
0:01 / 14:14
